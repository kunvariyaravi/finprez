// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Post          Post[]
  Comment       Comment[]
  ipoposts      Ipopost[]
}

model VerificationToken {
  identifier String   @id @map("_id")
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id    String  @id @default(cuid()) @map("_id")
  slug  String  @unique
  title String
  img   String?
  Posts Post[]
}

model Post {
  id              String    @id @default(cuid()) @map("_id")
  createdAt       DateTime  @default(now())
  slug            String    @unique
  title           String
  metadescription String?
  desc            String
  img             String?
  views           Int       @default(0)
  catSlug         String
  cat             Category  @relation(fields: [catSlug], references: [slug])
  userEmail       String
  user            User      @relation(fields: [userEmail], references: [email])
  comments        Comment[]
}

model Comment {
  id        String   @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())
  desc      String
  userEmail String
  user      User     @relation(fields: [userEmail], references: [email])
  postSlug  String
  post      Post     @relation(fields: [postSlug], references: [slug])
}

model Ipopost {
  id          String   @id @default(cuid()) @map("_id")
  createdAt   DateTime @default(now())
  title       String
  iposlug     String   @unique
  company     String
  description String
  img         String?

  // important dates
  opendate      DateTime?
  closedate     DateTime?
  allotmentdate DateTime?
  listingdate   DateTime?

  price            String?
  lot              Int?
  gmp              Float?
  listingat        String?
  totalissueshares String?
  totalissuesize   String?
  freshissueshares String?
  freshissuesize   String?
  ofsissueshares   String?
  ofsissuesize     String?
  facevalue        String?
  retailquota      Int?
  qibquota         Int?
  niiquota         Int?

  // Key Performance Indicator
  t1          String?
  t2          String?
  t3          String?
  t4          String?
  t1assets    String?
  t2assets    String?
  t3assets    String?
  t4assets    String?
  t1revenue   String?
  t2revenue   String?
  t3revenue   String?
  t4revenue   String?
  t1pat       String?
  t2pat       String?
  t3pat       String?
  t4pat       String?
  t1nw        String?
  t2nw        String?
  t3nw        String?
  t4nw        String?
  t1ressur    String?
  t2ressur    String?
  t3ressur    String?
  t4ressur    String?
  t1borrowing String?
  t2borrowing String?
  t3borrowing String?
  t4borrowing String?
  amountin    String?

  // Lot Information
  rminlot    Int?
  rminshares Int?
  rminamount Int?
  rmaxlot    Int?
  rmaxshares Int?
  rmaxamount Int?
  sminlot    Int?
  sminshares Int?
  sminamount Int?
  smaxlot    Int?
  smaxshares Int?
  smaxamount Int?
  bminlot    Int?
  bminshares Int?
  bminamount Int?

  // Key Performance Indicator
  pe           String?
  mcap         String?
  roe          String?
  roce         String?
  debttoequity String?
  eps          String?
  ronw         String?

  // Subscription Status
  subdate1   String?
  subqib1    String?
  subnii1    String?
  subretail1 String?
  subtotal1  String?
  subdate2   String?
  subqib2    String?
  subnii2    String?
  subretail2 String?
  subtotal2  String?
  subdate3   String?
  subqib3    String?
  subnii3    String?
  subretail3 String?
  subtotal3  String?

  // Contact Details
  contactaddress String?
  contactphone   String?
  contactemail   String?
  contactwebsite String?

  // IPO Registrar
  registraraddress String?
  registrarphone   String?
  registraremail   String?
  registrarwebsite String?

  // Relationships
  user   User   @relation(fields: [userId], references: [id])
  userId String
}
